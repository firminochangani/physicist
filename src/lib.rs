use std::f64::consts::PI;

pub mod area;

pub const STANDARD_GRAVITY: f64 = 9.806_65;

/// Weight is the force generated by the gravitational attraction of one object on another object.
///
/// Equation: 𝑊=𝑚𝑔
///
/// https://www1.grc.nasa.gov/beginners-guide-to-aeronautics/weight-equation-2/
pub fn weight(mass: f64) -> f64 {
    mass * STANDARD_GRAVITY
}

/// Density (volumetric mass density or specific mass) is the ratio of a substance's mass to its volume.
///
/// Equation: ρ=m/V
///
/// https://en.wikipedia.org/wiki/Density
pub fn density(mass: f64, vol: f64) -> f64 {
    mass / vol
}

/// The volume of rectangular prism with dimensions a, b, and h the volume is the product of the three lengths
///
/// Equation: V = a * b * h
///
/// https://www.grc.nasa.gov/www/k-12/airplane/volume.html
pub fn volume_rect_prism(length: f64, width: f64, height: f64) -> f64 {
    length * width * height
}

/// The distance from one point on the surface to another point on the surface measured
/// through the center of the sphere is called the diameter. The volume V of a sphere is equal to pi (3.14159)
/// times the diameter d cubed divided by six.
///
/// Equation: V = pi * d^3 / 6
///
/// https://www.grc.nasa.gov/www/k-12/airplane/volume.html
pub fn volume_sphere(diameter: f64) -> f64 {
    (PI * diameter.powf(3.0)) / 6.0
}

/// For a circular cylinder, we need to know the length h of the cylinder and the diameter d of the circular cross section.
/// Then the equation for the volume is pi times the diameter squared times the length divided by four;
///
/// Equation: V = pi * d^2 * h / 4
///
/// https://www.grc.nasa.gov/www/k-12/airplane/volume.html
pub fn volume_cylinder(diamter: f64, height: f64) -> f64 {
    (PI * diamter.powf(2.0) * height) / 4.0
}

/// A cube is a special case of a rectangular prism in which all the sides are equal to a. The volume equation then becomes;
///
/// Equation: V = a^3
///
/// https://www.grc.nasa.gov/www/k-12/airplane/volume.html
pub fn volume_cube(a: f64) -> f64 {
    a.powf(3.0)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_weight() {
        assert_eq!(weight(0.005), 0.04903325);
    }

    #[test]
    fn test_volume_sphere() {
        assert_eq!(volume_sphere(10.0), 523.5987755982989);
    }

    #[test]
    fn test_volume_rect_prism() {
        assert_eq!(volume_rect_prism(5.0, 5.0, 10.0), 250.0);
    }

    #[test]
    fn test_volume_cylinder() {
        assert_eq!(volume_cylinder(10.0, 20.0), 1570.7963267948967);
    }

    #[test]
    fn test_volume_cube() {
        assert_eq!(volume_cube(1.65), 4.492125);
    }
}
